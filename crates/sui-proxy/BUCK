deps = [
    "//crates/mysten-metrics:mysten-metrics",
    "//crates/sui-tls:sui-tls",
    "//crates/sui-types:sui-types",
    "//crates/telemetry-subscribers:telemetry-subscribers",
    "//third-party:anyhow_1_0_71",
    "//third-party:axum-server_0_5_1",
    "//third-party:axum_0_6_20",
    "//third-party:bytes_1_4_0",
    "//third-party:clap_4_4_1",
    "//third-party:const-str_0_5_6",
    "//third-party:fastcrypto_0_1_7",
    "//third-party:git-version_0_3_5",
    "//third-party:http-body_0_4_5",
    "//third-party:hyper_0_14_26",
    "//third-party:itertools_0_10_5",
    "//third-party:multiaddr_0_17_0",
    "//third-party:once_cell_1_18_0",
    "//third-party:prometheus_0_13_3",
    "//third-party:prost_0_12_1",
    "//third-party:protobuf_2_28_0",
    "//third-party:rand_0_8_5",
    "//third-party:reqwest_0_11_20",
    "//third-party:rustls-pemfile_1_0_2",
    "//third-party:rustls_0_21_6",
    "//third-party:serde_1_0_190",
    "//third-party:serde_json_1_0_95",
    "//third-party:serde_with_2_1_0",
    "//third-party:serde_yaml_0_8_26",
    "//third-party:snap_1_1_0",
    "//third-party:tokio_1_28_1",
    "//third-party:tower-http_0_3_5",
    "//third-party:tower_0_4_13",
    "//third-party:tracing_0_1_37",
]
env = {
    "CARGO_MANIFEST_DIR": ".",
    "CARGO_PKG_AUTHORS": "[Mysten Labs <build@mystenlabs.com>]",
    "CARGO_PKG_NAME": "sui-proxy",
    "CARGO_BIN_NAME": "sui-proxy",
    "CARGO_PKG_VERSION": "0.0.2",
}
rust_library(
    name="lib",
    incremental_enabled=True,
    srcs=glob(["*", "**/*"]),
    crate_root="src/lib.rs",
    env=env,
    deps=deps,
    edition="2021",
    visibility=["PUBLIC"],
)

rust_binary(
    name="sui-proxy",
    srcs=["src/main.rs"],
    named_deps={"sui_proxy": ":lib"},
    deps=deps,
    crate_root="src/main.rs",
    env=env,
    edition="2021",
    visibility=["PUBLIC"],
    rustc_flags=["-C", "target-feature=+crt-static"],
)
# BUILD_SCRIPT IS NEEDED
load("@prelude-mysten//buildah/buildah_image.bzl", "buildah_image")
load("@prelude-mysten//mypkg/mypkg.bzl", "get_mypkg")

get_mypkg(
    name="sui-proxy-prod",
    build="sui-proxy:prod",
)

buildah_image(
    name="ubuntu-sui-proxy",
    srcs=["Dockerfile"],
    mapped_sources={
        "sui-proxy.yaml": "src/data/config.yaml",
    },
    layers=[":sui-proxy-prod"],
)
