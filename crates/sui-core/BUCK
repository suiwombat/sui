
deps = [
    "//third-party:anyhow",
    "//third-party:arc-swap",
    "//third-party:async-trait",
    "//third-party:bcs",
    "//third-party:bytes",
    "//third-party:chrono",
    "//third-party:dashmap",
    "//third-party:either",
    "//third-party:enum_dispatch",
    "//third-party:eyre",
    "//third-party:fastcrypto",
    "//third-party:fastcrypto-zkp",
    "//third-party:futures",
    "//third-party:im",
    "//third-party:itertools",
    "//third-party:lru",
    "//external-crates/move/move-binary-format:move-binary-format",
    "//external-crates/move/tools/move-bytecode-utils:move-bytecode-utils",
    "//external-crates/move/move-core/types:move-core-types",
    "//external-crates/move/tools/move-package:move-package",
    "//external-crates/move/move-symbol-pool:move-symbol-pool",
    "//crates/mysten-common:mysten-common",
    "//crates/mysten-metrics:mysten-metrics",
    "//crates/mysten-network:mysten-network",
    "//narwhal/config:narwhal-config",
    "//narwhal/crypto:narwhal-crypto",
    "//narwhal/executor:narwhal-executor",
    "//narwhal/network:narwhal-network",
    "//narwhal/node:narwhal-node",
    "//narwhal/types:narwhal-types",
    "//narwhal/worker:narwhal-worker",
    "//third-party:num_cpus",
    "//third-party:object_store",
    "//third-party:once_cell",
    "//third-party:parking_lot",
    "//third-party:prometheus",
    "//third-party:rand",
    "//third-party:rocksdb",
    "//third-party:scopeguard",
    "//third-party:serde",
    "//third-party:serde_json",
    "//third-party:serde_with",
    "//crates/shared-crypto:shared-crypto",
    "//third-party:signature",
    "//crates/sui-archival:sui-archival",
    "//crates/sui-config:sui-config",
    "//sui-execution:sui-execution",
    "//crates/sui-framework:sui-framework",
    "//crates/sui-genesis-builder:sui-genesis-builder",
    "//crates/sui-json-rpc-types:sui-json-rpc-types",
    "//crates/sui-macros:sui-macros",
    "//crates/sui-move-build:sui-move-build",
    "//crates/sui-network:sui-network",
    "//crates/sui-protocol-config:sui-protocol-config",
    "//crates/sui-simulator:sui-simulator",
    "//crates/sui-storage:sui-storage",
    "//crates/sui-swarm-config:sui-swarm-config",
    "//crates/sui-transaction-checks:sui-transaction-checks",
    "//crates/sui-types:sui-types",
    "//third-party:tap",
    "//crates/telemetry-subscribers:telemetry-subscribers",
    "//third-party:tempfile",
    "//third-party:thiserror",
    "//third-party:tokio",
    "//third-party:tokio-retry",
    "//third-party:tokio-stream",
    "//third-party:tracing",
    "//crates/typed-store:typed-store",
    "//crates/typed-store-derive:typed-store-derive",
]
env = {
    "CARGO_MANIFEST_DIR": ".",
    "CARGO_PKG_AUTHORS": "[Mysten Labs <build@mystenlabs.com>]",
    "CARGO_PKG_DESCRIPTION": "",
    "CARGO_PKG_NAME": "sui-core",
    "CARGO_PKG_VERSION": "0.1.0",
}

rust_library(
    name = "sui-core",
    srcs = glob(["*","**/*"]),
    crate_root = "src/lib.rs",
    env = env,
    # license = "Apache-2.0",
    edition = "2021",
    visibility = ["PUBLIC"],
    deps = deps
)

# rust_binary(
#     name = "sui-core-build-script-build",
#     srcs = ["build.rs"],
#     crate = "build_script_build",
#     crate_root = "build.rs",
#     edition = "2021",
#     env = env,
#     features = ["runtime"],
#     visibility = ["PUBLIC"],
#     deps = [
#     ]
# )

# load("@prelude//rust:cargo_buildscript.bzl", "buildscript_run")
# buildscript_run(
#     name = "sui-core-build-script-run",
#     package_name = "sui-core",
#     buildscript_rule = ":sui-core-build-script-build",
#     features = ["runtime"],
#     version = "0.1.0",
# )
